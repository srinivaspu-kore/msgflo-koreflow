var supportsScheme, transports,
  indexOf = [].indexOf;

transports = {
  amqp: require('./amqp'),
  mqtt: require('./mqtt'),
  direct: require('./direct')
};

transports.amqps = transports.amqp;

supportsScheme = function(scheme) {
  return indexOf.call(Object.keys(transports), scheme) >= 0;
};

exports.getClient = function(address, options) {
  var client, scheme;
  scheme = address.split('://')[0];
  if (!supportsScheme(scheme)) {
    throw new Error('Unsupported scheme: ' + scheme);
  }
  client = new transports[scheme].Client(address, options);
  return client;
};

exports.getBroker = function(address, options) {
  var scheme;
  scheme = address.split('://')[0];
  if (!supportsScheme(scheme)) {
    throw new Error('Unsupported scheme: ' + scheme);
  }
  return new transports[scheme].MessageBroker(address, options);
};

// @module: Must have Client and MessageBroker constructors, implementing these interfaces
exports.register = function(scheme, module) {
  return transports[scheme] = module;
};
