var clone;

exports.clone = clone = function(obj) {
  var flags, key, newInstance;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  if (obj instanceof Date) {
    return new Date(obj.getTime());
  }
  if (obj instanceof RegExp) {
    flags = '';
    if (obj.global != null) {
      flags += 'g';
    }
    if (obj.ignoreCase != null) {
      flags += 'i';
    }
    if (obj.multiline != null) {
      flags += 'm';
    }
    if (obj.sticky != null) {
      flags += 'y';
    }
    return new RegExp(obj.source, flags);
  }
  newInstance = new obj.constructor();
  for (key in obj) {
    newInstance[key] = clone(obj[key]);
  }
  return newInstance;
};

exports.readGraph = function(filepath, callback) {
  var ext, fbp, fs, path;
  path = require('path');
  fs = require('fs');
  fbp = require('fbp');
  ext = path.extname(filepath);
  return fs.readFile(filepath, {
    encoding: 'utf-8'
  }, function(err, contents) {
    var e, graph;
    if (err) {
      return callback(err);
    }
    try {
      if (ext === '.fbp') {
        graph = fbp.parse(contents);
      } else {
        graph = JSON.parse(contents);
      }
    } catch (error) {
      e = error;
      return callback(e);
    }
    return callback(null, graph);
  });
};

// Note: relies on convention
exports.queueName = function(role, port) {
  return `${role}.${port.toUpperCase()}`;
};
