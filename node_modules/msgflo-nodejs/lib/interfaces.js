(function() {
  var MessageBroker, MessagingClient, MessagingSystem,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MessagingSystem = (function() {
    function MessagingSystem(address, options) {}

    MessagingSystem.prototype.connect = function(callback) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.disconnect = function(callback) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.createQueue = function(type, queueName, options, callback) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.removeQueue = function(type, queueName, callback) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.sendTo = function(type, name, message, callback) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.subscribeToQueue = function(queueName, handler, callback) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.ackMessage = function(message) {
      throw new Error('Not Implemented');
    };

    MessagingSystem.prototype.nackMessage = function(message) {
      throw new Error('Not Implemented');
    };

    return MessagingSystem;

  })();

  MessagingClient = (function(superClass) {
    extend(MessagingClient, superClass);

    function MessagingClient() {
      return MessagingClient.__super__.constructor.apply(this, arguments);
    }

    MessagingClient.prototype.registerParticipant = function(part, callback) {
      throw new Error('Not Implemented');
    };

    return MessagingClient;

  })(MessagingSystem);

  exports.MessagingClient = MessagingClient;

  MessageBroker = (function(superClass) {
    extend(MessageBroker, superClass);

    function MessageBroker() {
      return MessageBroker.__super__.constructor.apply(this, arguments);
    }

    MessageBroker.prototype.addBinding = function(binding, callback) {
      throw new Error('Not Implemented');
    };

    MessageBroker.prototype.removeBinding = function(binding, callback) {
      throw new Error('Not Implemented');
    };

    MessageBroker.prototype.listBindings = function(callback) {
      throw new Error('Not Implemented');
    };

    MessageBroker.prototype.subscribeData = function(binding, datahandler, callback) {
      throw new Error('Not Implemented');
    };

    MessageBroker.prototype.unsubscribeData = function(binding, datahandler, callback) {
      throw new Error('Not Implemented');
    };

    MessageBroker.prototype.listSubscriptions = function(callback) {
      throw new Error('Not Implemented');
    };

    MessageBroker.prototype.subscribeParticipantChange = function(handler) {
      throw new Error('Not Implemented');
    };

    return MessageBroker;

  })(MessagingSystem);

  exports.MessageBroker = MessageBroker;

}).call(this);
