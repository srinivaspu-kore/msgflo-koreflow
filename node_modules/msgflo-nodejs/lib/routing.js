(function() {
  var Binder, bindingId, debug;

  debug = require('debug')('msgflo:routing');

  bindingId = function(f, t) {
    return f + "-" + t;
  };

  Binder = (function() {
    function Binder(transport1) {
      this.transport = transport1;
      this.bindings = {};
      this.subscriptions = {};
    }

    Binder.prototype.addBinding = function(binding, callback) {
      var from, handler, id, to;
      from = binding.src;
      to = binding.tgt;
      id = bindingId(from, to);
      debug('Binder.addBinding', binding.type, id);
      if (this.bindings[id]) {
        return callback(null);
      }
      handler = (function(_this) {
        return function(msg) {
          var i, len, ref, subCallback, subscription;
          binding = _this.bindings[id];
          if (!(binding != null ? binding.enabled : void 0)) {
            return;
          }
          debug('edge message', from, to, msg);
          subscription = _this.subscriptions[id];
          if (subscription) {
            ref = subscription.handlers;
            for (i = 0, len = ref.length; i < len; i++) {
              subCallback = ref[i];
              subCallback(subscription.binding, msg.data);
            }
          }
          if (from !== to) {
            return _this.transport.sendTo('outqueue', to, msg.data, function(err) {
              if (err) {
                throw err;
              }
            });
          } else {

          }
        };
      })(this);
      return this.transport.subscribeToQueue(from, handler, (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          _this.bindings[id] = {
            handler: handler,
            enabled: true
          };
          return callback(null);
        };
      })(this));
    };

    Binder.prototype.removeBinding = function(binding, callback) {
      var from, id, to;
      from = binding.src;
      to = binding.tgt;
      id = bindingId(from, to);
      debug('Binder.removeBinding', binding, id);
      binding = this.bindings[id];
      if (!binding) {
        return callback(new Error("Binding does not exist"));
      }
      binding.enabled = false;
      delete this.bindings[id];
      return callback(null);
    };

    Binder.prototype.listBindings = function(callback) {
      debug('Binder.listBindings');
      return callback(null, []);
    };

    Binder.prototype.subscribeData = function(binding, datahandler, callback) {
      var id;
      id = bindingId(binding.src, binding.tgt);
      if (!this.subscriptions[id]) {
        this.subscriptions[id] = {
          handlers: [],
          binding: binding
        };
      }
      this.subscriptions[id].handlers.push(datahandler);
      return callback(null);
    };

    Binder.prototype.unsubscribeData = function(binding, datahandler, callback) {
      var handlerIndex, id, subscription;
      id = bindingId(binding.src, binding.tgt);
      subscription = this.subscriptions[id];
      handlerIndex = subscription.handlers.indexOf(datahandler);
      if (handlerIndex === -1) {
        return callback(new Error("Subscription was not found"));
      }
      subscription.handlers = subscription.handlers.splice(handlerIndex, 1);
      return callback(null);
    };

    Binder.prototype.listSubscriptions = function(callback) {
      var id, ref, sub, subs;
      subs = [];
      ref = this.subscriptions;
      for (id in ref) {
        sub = ref[id];
        subs.push(sub.binding);
      }
      return callback(null, subs);
    };

    return Binder;

  })();

  exports.Binder = Binder;

  exports.binderMixin = function(transport) {
    var b;
    b = new Binder(transport);
    transport._binder = b;
    transport.addBinding = b.addBinding.bind(b);
    transport.removeBinding = b.removeBinding.bind(b);
    transport.listBindings = b.listBindings.bind(b);
    transport.subscribeData = b.subscribeData.bind(b);
    transport.unsubscribeData = b.unsubscribeData.bind(b);
    return transport.listSubscriptions = b.listSubscriptions.bind(b);
  };

}).call(this);
