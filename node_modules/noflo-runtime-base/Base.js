var BaseTransport, debugMessagingReceive, debugMessagingReceivePayload, debugMessagingSend, debugMessagingSendPayload, protocols,
  indexOf = [].indexOf;

protocols = {
  Runtime: require('./protocol/Runtime'),
  Graph: require('./protocol/Graph'),
  Network: require('./protocol/Network'),
  Component: require('./protocol/Component')
};

debugMessagingReceive = require('debug')('noflo-runtime-base:messaging:receive');

debugMessagingReceivePayload = require('debug')('noflo-runtime-base:messaging:receive:payload');

debugMessagingSend = require('debug')('noflo-runtime-base:messaging:send');

debugMessagingSendPayload = require('debug')('noflo-runtime-base:messaging:send:payload');

// This is the class all NoFlo runtime implementations can extend to easily wrap
// into any transport protocol.
BaseTransport = class BaseTransport {
  constructor(options) {
    var graphName;
    this.options = options;
    if (!this.options) {
      this.options = {};
    }
    this.version = '0.7';
    this.component = new protocols.Component(this);
    this.graph = new protocols.Graph(this);
    this.network = new protocols.Network(this);
    this.runtime = new protocols.Runtime(this);
    this.context = null;
    if (this.options.defaultGraph != null) {
      this.options.defaultGraph.baseDir = this.options.baseDir;
      graphName = this._getGraphName(this.options.defaultGraph);
      this.context = 'none';
      this.graph.registerGraph(graphName, this.options.defaultGraph);
      this.runtime.setMainGraph(graphName, this.options.defaultGraph);
      this.network._startNetwork(this.options.defaultGraph, graphName, this.context, function(err) {
        if (err) {
          throw err;
        }
      });
    }
    if ((this.options.captureOutput != null) && this.options.captureOutput) {
      // Start capturing so that we can send it to the UI when it connects
      this.startCapture();
    }
    if (!this.options.capabilities) {
      this.options.capabilities = ['protocol:graph', 'protocol:component', 'protocol:network', 'protocol:runtime', 'component:setsource', 'component:getsource', 'graph:readonly', 'network:data', 'network:control', 'network:status'];
    }
    if (!this.options.defaultPermissions) {
      // Default: no capabilities granted for anonymous users
      this.options.defaultPermissions = [];
    }
    if (!this.options.permissions) {
      this.options.permissions = {};
    }
  }

  // Generate a name for the main graph
  _getGraphName(graph) {
    var graphName, namespace;
    namespace = this.options.namespace || 'default';
    graphName = graph.name || 'main';
    return `${namespace}/${graphName}`;
  }

  // Check if a given user is authorized for a given capability

  // @param [Array] Capabilities to check
  // @param [String] Secret provided by user
  canDo(capability, secret) {
    var checkCapabilities, permitted, userCapabilities;
    if (typeof capability === 'string') {
      checkCapabilities = [capability];
    } else {
      checkCapabilities = capability;
    }
    userCapabilities = this.getPermitted(secret);
    permitted = checkCapabilities.filter(function(perm) {
      return indexOf.call(userCapabilities, perm) >= 0;
    });
    if (permitted.length > 0) {
      return true;
    }
    return false;
  }

  // Check if a given user is authorized to send a given message
  canInput(protocol, topic, secret) {
    var message;
    if (protocol === 'graph') {
      // All graph messages are under the same capability
      return this.canDo(['protocol:graph'], secret);
    }
    message = `${protocol}:${topic}`;
    switch (message) {
      case 'component:list':
        return this.canDo(['protocol:component'], secret);
      case 'component:getsource':
        return this.canDo(['component:getsource'], secret);
      case 'component:source':
        return this.canDo(['component:setsource'], secret);
      case 'network:edges':
        return this.canDo(['network:data', 'protocol:network'], secret);
      case 'network:start':
        return this.canDo(['network:control', 'protocol:network'], secret);
      case 'network:stop':
        return this.canDo(['network:control', 'protocol:network'], secret);
      case 'network:debug':
        return this.canDo(['network:control', 'protocol:network'], secret);
      case 'network:getstatus':
        return this.canDo(['network:status', 'network:control', 'protocol:network'], secret);
      case 'runtime:getruntime':
        return true;
      case 'runtime:packet':
        return this.canDo(['protocol:runtime'], secret);
    }
    return false;
  }

  // Get enabled capabilities for a user

  // @param [String] Secret provided by user
  getPermitted(secret) {
    if (!secret) {
      return this.options.defaultPermissions;
    }
    if (!this.options.permissions[secret]) {
      return [];
    }
    return this.options.permissions[secret];
  }

  // Send a message back to the user via the transport protocol.

  // Each transport implementation should provide their own implementation
  // of this method.

  // The context is usually the context originally received from the
  // transport with the request. This could be an iframe origin or a
  // specific WebSocket connection.

  // @param [String] Name of the protocol
  // @param [String] Topic of the message
  // @param [Object] Message payload
  // @param [Object] Message context, dependent on the transport
  send(protocol, topic, payload, context) {
    debugMessagingSend(`${protocol} ${topic}`);
    return debugMessagingSendPayload(payload);
  }

  
  // Send a message to *all users*  via the transport protocol

  // The transport should verify that the recipients are authorized to receive
  // the message by using the `canDo` method.

  // Like send() only it sends to all.
  // @param [Object] Message context, can be null
  sendAll(protocol, topic, payload, context) {}

  // This is the entry-point to actual protocol handlers. When receiving
  // a message, the runtime should call this to make the requested actions
  // happen

  // The context is originally received from the transport. This could be
  // an iframe origin or a specific WebSocket connection. The context will
  // be utilized when sending messages back to the requester.

  // @param [String] Name of the protocol
  // @param [String] Topic of the message
  // @param [Object] Message payload
  // @param [Object] Message context, dependent on the transport
  receive(protocol, topic, payload, context) {
    if (!payload) {
      payload = {};
    }
    debugMessagingReceive(`${protocol} ${topic}`);
    debugMessagingReceivePayload(payload);
    if (!this.canInput(protocol, topic, payload.secret)) {
      this.send(protocol, 'error', new Error(`${protocol}:${topic} is not permitted`), context);
      return;
    }
    this.context = context;
    switch (protocol) {
      case 'runtime':
        return this.runtime.receive(topic, payload, context);
      case 'graph':
        return this.graph.receive(topic, payload, context);
      case 'network':
        return this.network.receive(topic, payload, context);
      case 'component':
        return this.component.receive(topic, payload, context);
      default:
        return this.send(protocol, 'error', new Error(`Protocol ${protocol} is not supported`), context);
    }
  }

};

module.exports = BaseTransport;

module.exports.trace = require('./trace');

module.exports.direct = require('./direct');
